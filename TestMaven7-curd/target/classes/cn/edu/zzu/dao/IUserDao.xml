<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.zzu.dao.IUserDao">
    <!--此配置文件中的实体中的字段和表中字段名保持一致
        若有需要，可以通过resultMap标签进行映射
        配置 查询结果的列名和实体类的属性名的对应关系
                id 是其他parameterType的引用名称
                type 中名称在sqlmapConfig的typeAliases下的package配置了别名，且不区分大小写
        <resultMap id="userMap" type="uSeR">
            主键字段的对应
            <id property="userId" column="id"></id>
            <非主键字段的对应
            <result property="userName" column="username"></result>
            <result property="userAddress" column="address"></result>
            <result property="userSex" column="sex"></result>
            <result property="userBirthday" column="birthday"></result>
        </resultMap>
        -->
    <!--sql标签使用，解决重复sql语句问题-->
    <sql id="defaultUser">
        select * from user 
    </sql>
<!--动态sql-->
    <select id="findUserByIds" resultType="user" parameterType="cn.edu.zzu.QueryVO.QueryVo">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids!=null and ids.size>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findUserByCondition" parameterType="user" resultType="user">
        select * from user <!--where 1=1-->
        <where>
            <if test="username!=null">
                and username = #{username}
            </if>
            <if test="sex!=null">
                and sex = #{sex}
            </if>
        </where>
    </select>


    <!--删除操作-->
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from user where id=#{uid}
    </delete>
    <delete id="deleteByIdFLag" parameterType="java.lang.Integer" >
        delete from user where id=#{uid}
    </delete>
    <!--更新操作-->
    <update id="UpdateUserById" parameterType="user">
        update user set username=#{username} ,address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}
    </update>
    <!--插入操作-->
    <insert id="saveUser" parameterType="user">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--查询操作-->
    <select id="findAll" resultType="User">
            select * from user
    </select>
    
    <select id="findById" parameterType="int" resultType="user">
        select * from user where id=#{uid} <!--当参数是基本类型时候，可以自定义名称，不需要和传入参数名字保持一致-->
    </select>
    
    <select id="findByLike" resultType="user" parameterType="string">
        select * from user where username like #{name}<!--当参数是基本类型时候，可以自定义名称，不需要和传入参数名字保持一致-->
        <!-- select * from user where username like '%${value}%'-->
        <!--上述两种方式，通常参与第一种，是preparestatement 传入参数的方式，而第二种是字符串拼接-->
    </select>
    
    <select id="QueryVo" parameterType="cn.edu.zzu.QueryVO.QueryVo" resultType="user">
        select * from user where username like #{user.username}
    </select>
    
    <select id="findTotal" resultType="int">
        select count(*) from user
        <!--select count(id) from user-->
    </select>
</mapper>